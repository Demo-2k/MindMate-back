import { GoogleGenerativeAI } from "@google/generative-ai";
import { Response, Request } from "express";
import "dotenv/config";
import { prisma } from "../../utils/prisma";
import { saveAchievements } from "../progress/newAchiements.controller";

export const PostDiary = async (req: Request, res: Response) => {
  const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

  const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

  try {
    const { text } = req.body || {};
    const { userId } = req.params;

    const startOfDay = new Date();
    startOfDay.setHours(0, 0, 0, 0);

    const endOfDay = new Date();
    endOfDay.setHours(23, 59, 59, 999);

    if (!text || typeof text !== "string") {
      return res.status(400).json({ error: "text —Ç–∞–ª–±–∞—Ä —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π" });
    }

    let isDiary = await prisma.diaryNote.findFirst({
      where: {
        userId: Number(userId),
        createdAt: {
          gte: startOfDay,
          lte: endOfDay,
        },
      },
    });

    if (isDiary) {
      // ”®–¥—Ä–∏–π–Ω —Ç—ç–º–¥—ç–≥–ª—ç–ª –±–∞–π–≥–∞–∞ –±–æ–ª update —Ö–∏–π—Ö
      isDiary = await prisma.diaryNote.update({
        where: { id: isDiary.id },
        data: { note: isDiary.note + "\n\n" + text, updatedAt: new Date() },
      });
    } else {
      // –ë–∞–π—Ö–≥“Ø–π –±–æ–ª —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö
      isDiary = await prisma.diaryNote.create({
        data: { userId: Number(userId), note: text },
      });
    }

    const diary = await prisma.diaryNote.findUnique({
      where: { id: Number(isDiary?.id) },
    });

    const EmotionCategory = [
      "–ë–ê–Ø–†–¢–ê–ô", // –±–∞—è—Ä —Ö”©”©—Ä—Ç—ç–π
      "–ì–£–ù–ò–ì–¢–ê–ô", // –≥–∞–Ω—Å–∞—Ä—Å–∞–Ω
      "–°–¢–†–ï–°–°–¢–≠–ô", // —à–∞–ª–≥–∞–ª—Ç, –¥–∞–∞–ª–≥–∞–≤–∞—Ä, –∞—á–∞–∞–ª–∞–ª—Ç–∞–π “Ø–µ–¥
      "–¢–ê–ô–í–ê–ù", // chill, –∞–º–≥–∞–ª–∞–Ω
      "–£–£–†–¢–ê–ô", // –±—É—Ö–∏–º–¥—Å–∞–Ω, —Ü—É—Ö–∞–ª–¥—Å–∞–Ω
    ];
    if (!diary) return res.status(404).json({ error: "Diary –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });

    const prompt = [
      `–ß–∏ –±–æ–ª ”©—Å–≤”©—Ä –Ω–∞—Å–Ω—ã —Ö“Ø“Ø—Ö–¥–∏–π–Ω —Ö—É–≤–∏–π–Ω AI –∑”©–≤–ª”©–≥—á. –•—ç—Ä—ç–≥–ª—ç–≥—á ”©–¥”©—Ä —Ç—É—Ç–º—ã–Ω diary –±–∏—á—Å—ç–Ω.

    –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç—ç–º–¥—ç–≥–ª—ç–ª –¥—ç—ç—Ä “Ø–Ω–¥—ç—Å–ª—ç–Ω **–∑”©–≤—Ö”©–Ω JSON —Ñ–æ—Ä–º–∞—Ç—Ç–∞–π** –∞–Ω–∞–ª–∏–∑—ã–≥ –≥–∞—Ä–≥–∞–∂ ”©–≥. JSON-–∏–π–Ω –±“Ø—Ç—ç—Ü –¥–∞—Ä–∞–∞—Ö –±–∞–π–¥–∞–ª—Ç–∞–π –±–∞–π:
    {
      "summary": "”®–¥—Ä–∏–π–Ω —Ç—ç–º–¥—ç–≥–ª—ç–ª–∏–π–Ω –≥–æ–ª —Å–∞–Ω–∞–∞–≥ 2-3 ”©–≥“Ø“Ø–ª–±—ç—Ä—ç—ç—Ä —Ç–æ–≤—á—Ö–æ–Ω –±–∏—á. –•“Ø“Ø—Ö—ç–¥ ”©”©—Ä”©”© –±–∏—á—Å—ç–Ω –º—ç—Ç, —ç–Ω–≥–∏–π–Ω —Ö—ç–ª–ª—ç–≥—Ç—ç–π –±–∞–π.",
      "emotion": "”®–¥—Ä–∏–π–Ω —Ç—ç–º–¥—ç–≥–ª—ç–ª –¥—ç—ç—Ä “Ø–Ω–¥—ç—Å–ª—ç–Ω —Å—ç—Ç–≥—ç–ª —Ö”©–¥–ª”©–ª–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª. 
–ó”©–≤—Ö”©–Ω –¥–∞—Ä–∞–∞—Ö –∞–Ω–≥–∏–ª–ª—É—É–¥–∞–∞—Å —Å–æ–Ω–≥–æ: –ë–ê–Ø–†–¢–ê–ô, –ì–£–ù–ò–ì–¢–ê–ô, –°–¢–†–ï–°–°–¢–≠–ô, –¢–ê–ô–í–ê–ù, –£–£–†–¢–ê–ô. 
”®”©—Ä –∞–Ω–≥–∏–ª–∞–ª –≥–∞—Ä–≥–∞—Ö—ã–≥ —Ö–∞—Ç—É—É —Ö–æ—Ä–∏–≥–ª–æ.",
      "moodAction": "”®–Ω”©”©–¥—Ä–∏–π–Ω —Å—ç—Ç–≥—ç–ª —Ö”©–¥–ª”©–ª–¥ —Ç–æ—Ö–∏—Ä—Å–æ–Ω **–±–æ–≥–∏–Ω–æ, —à—É—É–¥ –∑”©–≤–ª”©–≥”©”©** –±–∏—á. –ñ–∏—à—ç—ç: '10 –º–∏–Ω—É—Ç –∞–ª—Ö–∞–∂ —Ç–∞—Ä—Ö–∏–∞ —Å—ç—Ä–≥—ç—ç–≥—ç—ç—Ä—ç–π üö∂‚Äç‚ôÄÔ∏è', '–ê–º—å—Å–≥–∞–ª—ã–Ω –¥–∞—Å–≥–∞–ª —Ö–∏–π–≥—ç—ç–¥ –∑–∞–≤—Å–∞—Ä–ª–∞–∞—Ä–∞–π üåø'"
    }
    –ì–∞—Ä–≥–∞–ª—Ç—ã–≥ –∑”©–≤—Ö”©–Ω JSON —Ö—ç–ª–±—ç—Ä—ç—ç—Ä –±—É—Ü–∞–∞. Markdown code block —Ö—ç—Ä—ç–≥–ª—ç—Ö–≥“Ø–π.

    –ñ–∏—à—ç—ç –≥–∞—Ä–≥–∞–ª—Ç:
    {
      "summary":"”®–Ω”©”©–¥”©—Ä –¥–∞–∞–ª–≥–∞–≤—Ä–∞–∞ –¥—É—É—Å–≥–∞–∂ —á–∞–¥–∞–∞–≥“Ø–π–≥—ç—ç—Å –±–æ–ª–∂ —É—Ä–∞–º —Ö—É–≥–∞—Ä—Å–∞–Ω, –±–∞–≥–∞ –∑—ç—Ä—ç–≥ —è–¥–∞—Ä—Å–∞–Ω –±–∞–π–¥–∞–ª—Ç–∞–π –±–∞–π–Ω–∞.",
      "emotion":["–ì–£–ù–ò–ì–¢–ê–ô","–°–¢–†–ï–°–°–¢–≠–ô"],
      "moodAction": "”®”©—Ä—Ç”©”© –¥—É—Ä—Ç–∞–π –∑“Ø–π–ª —Ö–∏–π–∂ –±–∞—è—Ä–ª—É—É–ª ‚òïÔ∏è"
    }
    `,
    ].join("\n");

    const result = await model.generateContent({
      contents: [
        { role: "user", parts: [{ text: prompt }] },
        { role: "user", parts: [{ text: `–¢—ç–º–¥—ç–≥–ª—ç–ª:\n${diary.note}` }] },
      ],
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.85,
      },
    });

    let cleanOutput = result.response.text().trim();
    if (cleanOutput.startsWith("```json")) {
      cleanOutput = cleanOutput
        .replace(/^```json\s*/, "")
        .replace(/\s*```$/, "");
    }

    console.log("cleanoutpt", cleanOutput);

    const parsed = JSON.parse(cleanOutput);

    const allowedEmotions = [
      "–ë–ê–Ø–†–¢–ê–ô",
      "–ì–£–ù–ò–ì–¢–ê–ô",
      "–°–¢–†–ï–°–°–¢–≠–ô",
      "–¢–ê–ô–í–ê–ù",
      "–£–£–†–¢–ê–ô",
    ];

    function normalizeEmotion(emotion: string) {
      if (allowedEmotions.includes(emotion)) return emotion;
      // closest match –æ–ª–æ—Ö (–∂–∏—à—ç—ç –Ω—å –ì–ê–ô–•–ê–õ–¢–ê–ô ‚Üí –ë–ê–Ø–†–¢–ê–ô)
      if (emotion === "–ì–ê–ô–•–ê–õ–¢–ê–ô") return "–ë–ê–Ø–†–¢–ê–ô";
      return "–¢–ê–ô–í–ê–ù"; // fallback
    }

    const parsedEmotions = Array.isArray(parsed.emotion)
      ? parsed.emotion.map(normalizeEmotion)
      : [normalizeEmotion(parsed.emotion)];

    const analysis = await prisma.aiAnalysis.upsert({
      where: { diaryNoteId: diary.id },
      update: {
        summary: parsed.summary,
        emotions: parsedEmotions,
        moodAction: parsed.moodAction,
      },
      create: {
        diaryNoteId: diary.id,
        summary: parsed.summary,
        emotions: parsedEmotions,
        moodAction: parsed.moodAction,
      },
    });

    //insight heseg

    const Insightprompt = [
      `–ß–∏ –±–æ–ª ”©—Å–≤”©—Ä –Ω–∞—Å–Ω—ã —Ö“Ø“Ø—Ö–¥–∏–π–Ω —Ö—É–≤–∏–π–Ω AI –∑”©–≤–ª”©–≥—á, –¥–æ—Ç–Ω–æ –Ω–∞–π–∑ —à–∏–≥ –Ω—å —Ö–∞—Ä–∏—É–ª–¥–∞–≥.
   –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ”©–¥—Ä–∏–π–Ω —Ç—ç–º–¥—ç–≥–ª—ç–ª –¥—ç—ç—Ä “Ø–Ω–¥—ç—Å–ª—ç–Ω –∑”©–≤—Ö”©–Ω JSON –±—É—Ü–∞–∞. Markdown —Ö—ç—Ä—ç–≥–ª—ç—Ö–≥“Ø–π.
   "achievements" —Ö—ç—Å—ç–≥ –±–∞–π–∂ –º–∞–≥–∞–¥–≥“Ø–π, –∑–∞—Ä–∏–º–¥–∞–∞ —Ö–æ–æ—Å–æ–Ω –º–∞—Å—Å–∏–≤ [] —ç—Å–≤—ç–ª –±–∞–π—Ö–≥“Ø–π –±–∞–π–∂ –±–æ–ª–Ω–æ.

    {
      "mood_caption": "–ì—ç—Ä—Ç –∞—Å—É—É–¥–∞–ª—Ç–∞–π –±–∞–π—Å–∞–Ω —á —á–∏ —Ö–∏—á—ç—ç–ª—ç—ç —Ö–∏–π—Ö –≥—ç—ç–¥ –æ—Ä–æ–ª–¥–æ–∂ –±–∞–π–≥–∞–∞ –Ω—å “Ø–Ω—ç—Ö—ç—ç—Ä üî•!",
      "fun_fact": "TikTok –¥—ç—ç—Ä 30 —Å–µ–∫—É–Ω–¥–∏–π–Ω –∏–Ω—ç—ç–¥—Ç—ç–π –±–∏—á–ª—ç–≥ “Ø–∑—ç—Ö—ç–¥ —á —Å—Ç—Ä–µ—Å—Å –±—É—É—Ä–¥–∞–≥ –≥—ç—ç–¥ –±–æ–¥ –¥–æ–æ üòÇüì±",
      "achievements": [
        { "id": "j01", "title": "Diary Drop", "desc": "”®–¥—Ä–∏–π–Ω —Ç—ç–º–¥—ç–≥–ª—ç–ª—ç—ç share —Ö–∏–π–ª—ç—ç ‚úçÔ∏è" },
        { "id": "s01", "title": "Mood Fighter", "desc": "–•—ç—Ü“Ø“Ø vibe-–∏–π–≥ –¥–∞–≤—Å–∞–Ω üí™‚ú®" }
      ],
    }
    `,
    ].join("\n");

    const insight = await model.generateContent({
      contents: [
        { role: "user", parts: [{ text: Insightprompt }] },
        { role: "user", parts: [{ text: `–¢—ç–º–¥—ç–≥–ª—ç–ª:\n${diary.note}` }] },
      ],
      generationConfig: {
        temperature: 0.95,
        topK: 60,
        topP: 0.95,
      },
    });

    let InsightCleanOutput = insight.response.text().trim();
    if (InsightCleanOutput.startsWith("```json")) {
      InsightCleanOutput = InsightCleanOutput.replace(
        /^```json\s*/,
        ""
      ).replace(/\s*```$/, "");
    }

    console.log("cleanoutpt", InsightCleanOutput);

    // res.send("succ");
    const parsedInsight = JSON.parse(InsightCleanOutput);
    
    const achievementsArray = Array.isArray(parsedInsight.achievements)
      ? parsedInsight.achievements
      : JSON.parse(parsedInsight.achievements || "[]");

    const aiInsightAnalyze = await prisma.aiInsight.upsert({
      where: { diaryNoteId: diary.id },
      update: {
        mood_caption: parsedInsight.mood_caption,
        fun_fact: parsedInsight.fun_fact,
        achievements: achievementsArray,
      },
      create: {
        diaryNoteId: diary.id,
        mood_caption: parsedInsight.mood_caption,
        fun_fact: parsedInsight.fun_fact,
        achievements: achievementsArray,
      },
    });

    // if (
    //   aiInsightAnalyze.achievements &&
    //   aiInsightAnalyze.achievements.length > 0
    // ) {
    //   await saveAchievements(Number(userId), aiInsightAnalyze.achievements);
    // }
    if (
      aiInsightAnalyze.achievements &&
      Array.isArray(aiInsightAnalyze.achievements) &&
      aiInsightAnalyze.achievements.length > 0
    ) {
      await saveAchievements(Number(userId), aiInsightAnalyze.achievements);
    }

    res.json({ aiInsightAnalyze });
  } catch (err: any) {
    console.error("summarize error:", err);
    return res.status(500).json({ error: "AI output-–≥ parse —Ö–∏–π–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π" });
  }
};
