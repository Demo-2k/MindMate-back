import { GoogleGenerativeAI } from "@google/generative-ai";
import { Response, Request } from "express";
import "dotenv/config";
import { prisma } from "../../utils/prisma";

export const PostDiary = async (req: Request, res: Response) => {
  const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

  const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

  try {
    const { text, targetLang = "mn" } = req.body || {};
    const { userId } = req.params;

    if (!text || typeof text !== "string") {
      return res.status(400).json({ error: "text —Ç–∞–ª–±–∞—Ä —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π" });
    }

    const createDiary = await prisma.diaryNote.create({
      data: {
        userId: Number(userId),
        note: text,
      },
    });

    console.log("createDiary", createDiary);

    const diary = await prisma.diaryNote.findUnique({
      where: { id: Number(createDiary?.id) },
    });

    const EmotionCategory = [
      "–ë–ê–Ø–†–¢–ê–ô", // –±–∞—è—Ä —Ö”©”©—Ä—Ç—ç–π
      "–ì–£–ù–ò–ì–¢–ê–ô", // –≥–∞–Ω—Å–∞—Ä—Å–∞–Ω
      "–°–¢–†–ï–°–°–¢–≠–ô", // —à–∞–ª–≥–∞–ª—Ç, –¥–∞–∞–ª–≥–∞–≤–∞—Ä, –∞—á–∞–∞–ª–∞–ª—Ç–∞–π “Ø–µ–¥
      "–¢–ê–ô–í–ê–ù", // chill, –∞–º–≥–∞–ª–∞–Ω
      "–£–£–†–¢–ê–ô", // –±—É—Ö–∏–º–¥—Å–∞–Ω, —Ü—É—Ö–∞–ª–¥—Å–∞–Ω
    ];
    if (!diary) return res.status(404).json({ error: "Diary –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });

    const prompt = [
      `–ß–∏ –±–æ–ª ”©—Å–≤”©—Ä –Ω–∞—Å–Ω—ã —Ö“Ø“Ø—Ö–¥–∏–π–Ω —Ö—É–≤–∏–π–Ω AI –∑”©–≤–ª”©–≥—á. –•—ç—Ä—ç–≥–ª—ç–≥—á ”©–¥”©—Ä —Ç—É—Ç–º—ã–Ω diary –±–∏—á—Å—ç–Ω. 

–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç—ç–º–¥—ç–≥–ª—ç–ª –¥—ç—ç—Ä “Ø–Ω–¥—ç—Å–ª—ç–Ω **–∑”©–≤—Ö”©–Ω JSON —Ñ–æ—Ä–º–∞—Ç—Ç–∞–π** –∞–Ω–∞–ª–∏–∑—ã–≥ –≥–∞—Ä–≥–∞–∂ ”©–≥. JSON-–∏–π–Ω –±“Ø—Ç—ç—Ü –¥–∞—Ä–∞–∞—Ö –±–∞–π–¥–∞–ª—Ç–∞–π –±–∞–π:
{
  "summary": "”®–¥—Ä–∏–π–Ω —Ç—ç–º–¥—ç–≥–ª—ç–ª–∏–π–Ω –≥–æ–ª —Å–∞–Ω–∞–∞–≥ 2-3 ”©–≥“Ø“Ø–ª–±—ç—Ä—ç—ç—Ä —Ç–æ–≤—á—Ö–æ–Ω –±–∏—á. –•“Ø“Ø—Ö—ç–¥ ”©”©—Ä”©”© –±–∏—á—Å—ç–Ω –º—ç—Ç, —ç–Ω–≥–∏–π–Ω —Ö—ç–ª–ª—ç–≥—Ç—ç–π –±–∞–π.",
  "emotion": "”®–¥—Ä–∏–π–Ω —Ç—ç–º–¥—ç–≥–ª—ç–ª –¥—ç—ç—Ä “Ø–Ω–¥—ç—Å–ª—ç–Ω —Å—ç—Ç–≥—ç–ª —Ö”©–¥–ª”©–ª–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª. –ë–æ–ª–æ–º–∂–∏—Ç –∞–Ω–≥–∏–ª–∞–ª: –ë–ê–Ø–†–¢–ê–ô, –ì–£–ù–ò–ì–¢–ê–ô, –°–¢–†–ï–°–°–¢–≠–ô, –¢–ê–ô–í–ê–ù, –£–£–†–¢–ê–ô. –•—ç—Ä—ç–≤ –Ω—ç–≥—ç—ç—Å –æ–ª–æ–Ω emotion –∏–ª—ç—Ä–≤—ç–ª JSON array —Ö—ç–ª–±—ç—Ä—ç—ç—Ä –≥–∞—Ä–≥–∞.",
  "sentiment": "”®–¥—Ä–∏–π–Ω –Ω–∏–π—Ç —Å—ç—Ç–≥—ç–ª —Ö”©–¥–ª”©–ª–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª. –ë–æ–ª–æ–º–∂–∏—Ç —É—Ç–≥—É—É–¥: positive, neutral, negative.",
  "intensity": "0..1 —Ö–æ–æ—Ä–æ–Ω–¥ —É—Ç–≥–∞ ”©–≥, —Å—ç—Ç–≥—ç–ª —Ö”©–¥–ª”©–ª–∏–π–Ω —Ö“Ø—á–∏–π–≥ –∏–ª—ç—Ä—Ö–∏–π–ª–Ω—ç.",
  "topics": ["Diary –¥—ç—ç—Ä –¥—É—Ä–¥–∞–≥–¥—Å–∞–Ω –≥–æ–ª —Å—ç–¥–≤“Ø“Ø–¥. –ë–æ–ª–æ–º–∂–∏—Ç –∞–Ω–≥–∏–ª–∞–ª: study, work, health, family, social, self-growth."],
  "needs": ["–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ö“Ø—Å—ç–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞, –∑”©–≤–ª”©–≥”©”© —à–∞–∞—Ä–¥—Å–∞–Ω –∑“Ø–π–ª—Å. –ë–æ–ª–æ–º–∂–∏—Ç –∞–Ω–≥–∏–ª–∞–ª: encouragement, plan, rest, celebrate, focus."],
  "evidence": ["Diary —Ç–µ–∫—Å—Ç—ç—ç—Å –∞–≤—Å–∞–Ω —Ç–æ–¥ –∂–∏—à—ç—ç. –•–∞–º–≥–∏–π–Ω —Ç–æ–¥–æ—Ä—Ö–æ–π 2-5 snippet."],
  "moodText": {
    "emoji": "–¢—É—Ö–∞–π–Ω emotion-—Ç —Ç–æ—Ö–∏—Ä–æ—Ö —ç–º–æ–∂–∏",
    "text": "–≠–Ω–≥–∏–π–Ω, —Ö”©”©—Ä—Ö”©–Ω —Ö—ç–ª–ª—ç–≥—Ç—ç–π –Ω—ç–≥ ”©–≥“Ø“Ø–ª–±—ç—Ä–∏–π–Ω —É—Ä–∞–º—à—É—É–ª–∞–ª. –ñ–∏—à—ç—ç: 'üòä ”®–Ω”©”©–¥”©—Ä —á–∏ –∏—Ö –±–∞—è—Ä—Ç–∞–π –±–∞–π–Ω–∞!'"
  },
  "moodAction": "”®–Ω”©”©–¥—Ä–∏–π–Ω —Å—ç—Ç–≥—ç–ª —Ö”©–¥–ª”©–ª–¥ —Ç–æ—Ö–∏—Ä—Å–æ–Ω –∂–∏–∂–∏–≥ –∞–ª—Ö–∞–º —ç—Å–≤—ç–ª –∑”©–≤–ª”©–≥”©”©. –ñ–∏—à—ç—ç: '–ù–∞–π–∑–¥–∞–∞ –±–∞—è—Ä—Ç–∞–π–≥–∞–∞ —Ö—É–≤–∞–∞–ª—Ü–∞–∞—Ä–∞–π üëØ', '10 –º–∏–Ω—É—Ç –∞–ª—Ö–∞–∂ —Ç–∞—Ä—Ö–∏–∞ —Å—ç—Ä–≥—ç—ç–≥—ç—ç—Ä—ç–π üö∂‚Äç‚ôÄÔ∏è', '–ê–º—å—Å–≥–∞–ª—ã–Ω –¥–∞—Å–≥–∞–ª —Ö–∏–π–≥—ç—ç–¥ –∑–∞–≤—Å–∞—Ä–ª–∞–∞—Ä–∞–π üåø'."
}

–ì–∞—Ä–≥–∞–ª—Ç—ã–≥ –∑”©–≤—Ö”©–Ω JSON —Ö—ç–ª–±—ç—Ä—ç—ç—Ä –±—É—Ü–∞–∞. Markdown code block —Ö—ç—Ä—ç–≥–ª—ç—Ö–≥“Ø–π.

–ñ–∏—à—ç—ç –≥–∞—Ä–≥–∞–ª—Ç:
{
  "summary":"”®–Ω”©”©–¥”©—Ä –¥–∞–∞–ª–≥–∞–≤—Ä–∞–∞ –¥—É—É—Å–≥–∞–∂ —á–∞–¥–∞–∞–≥“Ø–π–≥—ç—ç—Å –±–æ–ª–∂ —É—Ä–∞–º —Ö—É–≥–∞—Ä—Å–∞–Ω, –±–∞–≥–∞ –∑—ç—Ä—ç–≥ —è–¥–∞—Ä—Å–∞–Ω –±–∞–π–¥–∞–ª—Ç–∞–π –±–∞–π–Ω–∞.",
  "emotion":["–ì–£–ù–ò–ì–¢–ê–ô","–°–¢–†–ï–°–°–¢–≠–ô"],
  "sentiment":"negative",
  "intensity":0.75,
  "topics":["study","self-growth"],
  "needs":["encouragement","rest","plan"],
  "evidence":["–¥—É—É—Å–≥–∞–∂ —á–∞–¥–∞–ª–≥“Ø–π","—É—Ä–∞–º —Ö—É–≥–∞—Ä–ª–∞–∞","—è–¥–∞–∂ –±–∞–π–Ω–∞"],
  "moodText": {
    "emoji": "üò¢",
    "text": "”®–Ω”©”©–¥”©—Ä –∂–∞–∞—Ö–∞–Ω –≥—É–Ω–∏–≥—Ç–∞–π ”©–Ω–≥”©—Ä—Å”©–Ω —á —á–∏ –¥–∞–≤–∞–∞–¥ –≥–∞—Ä—á —á–∞–¥–Ω–∞!"
  },
  "moodAction": "”®”©—Ä—Ç”©”© –¥—É—Ä—Ç–∞–π –∑“Ø–π–ª —Ö–∏–π–∂ –±–∞—è—Ä–ª—É—É–ª ‚òïÔ∏è"
}
`,
    ].join("\n");

    // —á–∏–Ω–∏–π –æ–¥–æ–æ–≥–∏–π–Ω prompt-–æ–æ —Ö—ç—Ä—ç–≥–ª—ç–Ω—ç

    const result = await model.generateContent([
      { text: prompt },
      { text: `–¢—ç–º–¥—ç–≥–ª—ç–ª:\n${diary.note}` },
    ]);

    let cleanOutput = result.response.text().trim();
    if (cleanOutput.startsWith("```json")) {
      cleanOutput = cleanOutput
        .replace(/^```json\s*/, "")
        .replace(/\s*```$/, "");
    }

    console.log("cleanoutpt", cleanOutput);

    // res.send("succ");
    const parsed = JSON.parse(cleanOutput);

    const analysis = await prisma.aiAnalysis.create({
      data: {
        diaryNoteId: diary.id,
        summary: parsed.summary,
        emotions: Array.isArray(parsed.emotion)
          ? parsed.emotion
          : [parsed.emotion],
          sentiment:parsed.sentiment,

          intensity:parsed.intensity,

          topics:Array.isArray(parsed.topics)
          ? parsed.topics
          : [parsed.topics],

          needs:Array.isArray(parsed.needs)
          ? parsed.needs
          : [parsed.needs],
          evidence:Array.isArray(parsed.evidence)
          ? parsed.evidence
          : [parsed.evidence],

          moodText: parsed.moodText,
          moodAction: parsed.moodAction
        // horoscope: parsed.horoscope,
        // message: parsed.motivational_message,
        // calendarTasks: Array.isArray(parsed.calendarTasks)
        //   ? parsed.calendarTasks
        //   : [parsed.calendarTasks],
        // calendarHighlight: parsed.calendarHighlight,
        // calendarType: parsed.calendarType,
        // calendarDate: new Date(diary.createdAt),
      },
    });

    res.json({ analysis });
  } catch (err: any) {
    console.error("summarize error:", err);
    return res.status(500).json({ error: "AI output-–≥ parse —Ö–∏–π–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π" });
  }
};
